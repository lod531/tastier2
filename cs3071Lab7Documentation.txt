cs3071 Documentation							      studentNo: 13319368	
												
INTRODUCTION:

So this report may wind up being a hefty one. We were given additional time to do this particlar
lab, and so I used to spare time to go through the previous labs and fix all the terrible things
I did in order to get the tasks done in time. 

The sections will be labeled by what they cover. I'm going to assume a pretty hefty knowledge of
Tastier and Coco/R workings, this being not lab1 documentation, but lab7. 

The files changed are pretty much all of them, at least the usual suspects (Tastier.ATG of
course, Test.TAS, the tastier machine and assembler files), so instead of submitting the changed
files, I'm going to provide a link to the github entry here, as well as submit the 
TastierCompiler and TastierMachine folders whole. Hopefully that will make making and running 
the project painless. The github can be found here:

https://github.com/lod531/tastier2

With the relevant folders being TastierCompiler and TastierMachine (the default implementations
of Tastier are there to cross-reference for whenever I got lost, which I found very useful).




0: REFACTORING OF ALL PREVIOUS LABS

Changes will be covered in the order they appear in the Tastier.ATG file, so hopefully this 
will make for easy following, if one is inclined to follow. This is all cleaning/polishing/
redoing the previous labs to make them proper, and to uncut corners that were cut in order to 
just get the labs done. Day late and dollar short, but the Tastier file is now what it was 
meant to be.
											

--->printSymbol function has been redone to accommodate arrays and structs. Also the whole thing 
was rewritten in such a way as to make adding new kinds and types of symbols relatively painless.


--->getFrameAddress is a new function which keeps track of the stack address within the current
scope. The previous solution of just counting the number of symbols on the stack was pretty
silly, and made adding new kinds of symbols a total pain, so this function takes care of all
your addressing needs. It accounts for variables, arrays and structs and their respective
size needs. This also fixed the bug I could not for the life of me figure out when implementing
strings, where strings required padding to work. The bug was in improper stack addressing.


--->letter and string tokens were added to accommodate string literals and char arrays


--->SymbolIdent was added to clean up retreiving symbol identifiers, especially with structs now
in the mix.


--->SymbolLookup was added to refactor the symbol lookups all over the Tastier.ATG file.


--->Expr expression production was augmented with the conditional expression, so now instead
of conditionals only being viable as a method of assignment, they can appear anywhere where
an expression could, which, I know, I know, should have been done from the start.


--->Factor was totally redone. References to arrays, variables and structs are covered with
the first production, which is 4 lines of code. Yay. Added letter as a factor, which makes
it play nice with write (but letters are not allowed in arithmetic for the sake of accidental
mistakes)


--->LoadSymbol was added to refactor the loading of data onto the stack. Note that the load
does not compute the address, this is left to the VariableAddress production. It is merely a 
reproducable action symbol.


--->Relop has the additional boolean operators, as per previous labs.


--->Stat statement production was totally refactored, with everything being split into 
relevant components, which actually fixed a few bugs I was trying to track down. The entire 
Stat statement is now 40 lines, as opposed to a few hundred it was before. It was just awful
to work with.


--->VariableAddress production pushes the relevant address of the variable which is being 
accessed. So this includes variables, global variables, arrays and structs. This is also 
where the runtime array bounds checking takes place, as well as general array bounds checking
(can't have a 4D index into a 3D array etc.)


--->VariableAssignment production is the variable assignment itself. It does not include the
SymbolIdent production, but rather takes a symbol as a parameter. This allows to nicely
split the functionality, allowing increment and decrement assignments to be implemented 
cleanly. It also cleaned up constant initialization code, and basically anywhere assignment
was involved.=


--->IfStat is the good old if statement.


--->WhileStat is the same


--->ForStat is the refactored For statement, which now works with increment/decrement 
assignments (as does anywhere a stat is allowed), as well as conditionals (as conditionals
are now an expression, and so can also appear anywhere an expression can appear)


--->ReadStat is the default read statement, just put as a production of it's own


--->WriteStat is the refactored write production, which now takes string literals (previously
cut due to time constraints). Now works nicely with all types, so that's chars, ints and 
booleans. Previous implementation was a huge hunk of crap a hundred lines long. This is 20.
I know, I know, I shouldn't be, but I'm a little proud.


--->SwitchStat covered in it's own section below (marked with a number), as it's part of the
main assignment.


--->ConstProc and ConstDecl are the same as per pervious assignments, but cleaner due to all
the refactoring. Both now fit into the screen at once (constants are now completely implemented
within 60 lines of code, most of that being comments/spaces.)


--->ArrayDecl and StructDecl are covered in their own sections below, what with being part
of the assignment.


--->Strings are now character arrays, and the whole thing is so much nicer.


--->Lastly, the code itself is clean now. Things were renamed to more accurately signify their
semantic meanings, everything is properly indented etc. This is mostly because I finally got
the hang of vim.




1: SWITCH STATEMENT

The switch statement syntax is as follows:

switch(Expr)
{
	case expr:
	Stat
	break;
	.
	.
	.
	default:
	Stat
}
where Expr is expression, so whatever Expr can produce fits in there, and Stat is whatever the
Stat production can fit in. The breaks are mandatory, as is the default case.

Under the hood it's just a chain of if/elses. After each Stat a jump to the end (post default Stat)
is inserted, so that if the match succeeded and the case was executed, the PC jumps on out. If no
match was found, the if/else chain just falls all the way through down into teh default case. 

I won't go into detail of how if/elses work, as it's been covered in previous documentation 
for these labs.




2: STRUCT

The name struct was used, since C is the one true love. The syntax is as follows:

struct Ident
{
	Variable | Array | Struct
}

So structs within structs within structs are fine. The struct is actually implemented quite 
superficially. The name of the struct is simply prepended onto the names of the symbols declared
within the struct (with the prefix being passed along as a parameter, allowing for nested structs).
The names of struct vs symbol are separated by the dereference token. This is the reason for the
SymbolIdent production. Variables, Arrays, Structs etc. can only be named via Ident, which is
alphanumerics, so that their names don't clash with the struct structure. However, within assignment
and factors, SymbolIdent is used to account for the possibility of structs. So, when declaring
a variable the Ident token is used, but when referencing a variable, SymbolIdent production is used,
which can consist of Ident {"->" Ident}. But of course, the derefence "operator" cannot appear
with an Ident, and so the two don't conflict.

It's quite superficial, but could be used further, for example if one were implemented parameters
and wanted to pass a struct as a parameter, a simple function could push on all relevant symbols
onto the new stack frame, seeing as they're all identifiable. So I think the implementation is fine.

These structs aren't quite what one would find in C, where a struct is more of a template. Here a
struct is simply a way of grouping variables into conveient packages.




3: ARRAY

Unfortunately, I am using the stack to store the arrays, which is less than perfect. Ideally, arrays
would be stored in dynamic memory, but the machinery to use dmem wasn't really in place, and I opted
to go with the simpler option of the stack. This choice was made back when strings were being 
implemented for the first time, and so I figured it was too late to switch. If I were to do it again,
I'd use dmem. But it works, so oh well.

Array declaration syntax is as follows:

array type ident { [number] }

Which means that the constructor for the array is static, which is a consequence of not using dmem.
An array specified as: array char temp[10][20] has 10 rows, each with 20 columns each etc.

The arrays are stored in row-major order. 

In order to account for the size of the arrays, the Symbol class was augmented with an additional
item (Item6), which is an array specifying the structure of the symbol. For variables, the array
just contains plain old 1, as a variable can be viewed as an array of a single entry. Array
dimensions are stored in reverse order (for ease of address computation) within the array. The
getFrameAddress uses this information to appropriately calculate stack addresses, and 
VariableAssignment uses this information to appropriately index into the array. The math
for finding the appropriate address is simple. For a 3D array, it looks like this

a[x][y][z] = x * size y * size z + y + size z + z

where size z is the number of columns per row, and size y is the number of rows per, well, I think
of it as a cuboid, so it's number of rows per slice of cuboid.

However, indexing into arrays with just constants is very useless, so runtime accesses via
expressions are allowed. This was implemented via 4 new instructions: LoadI, LoadIG, StoI, StoIG.
There instructions are, obviously, variants of Load and Store already present in TastierMachine,
with the exception that instead of taking arguments as instructions, they take their arguments
from the stack at runtime. Thus the address/expression need not be known during compile time.

The arrays can be of arbitrary dimension (within memory limits).

It is enforced that arrays are always fully indexed, so now row-to-row assignments. This is only
because I don't have the time to implement these fancy features, but I think it can be done.




4: ADDITIONAL FEATURES - INCREMENT/DECREMENT AND RUN TIME ARRAY BOUNDS CHECKING

RUN TIME ARRAY BOUNDS CHECKING

Run-time checks are done within the VariableAddress production, as all accesses must use that
production to extract an address. 

It's a simple if/else. If the current index > number of entries in the dimension being accessed,
an error is triggered. This error is a new instruction named ArrayOutOfBounds, and it prints to
the console, that, well, there was an out of bounds array access. 

The expression is already on the stack (i.e. the expression used to index into the array), so
it is duplicated for compariso purposes (as boolean operators pop off their arguments). Then,
atop the duplicated expression value the relevant dimension size is pushed on, which size
can be found at sym.Item6[sym.Item6 - the number of the dimension being accessed]. The indexing
of dimensions is not 0, but 1-based. So an example check looks like this:

a[3][4][5] := 5, where the size of the array is a[10][10][20]

Sym.Item6 contains [20, 10, 10]. Lets say [3] is being checked. So the 3 is duplicated and the
duplicate is now atop the stack. Then sym.Item6[3 - 1] is pushed on, as 3 is the size of the
dimension and 1 is the current dimension being accessed. Then a more than boolean operation
is added, followed by an FJmp (jump on false). If 3 is more than 10, the FJmp won't take
place and the execution will fall through to the error, otherwise everything is fine.
Looks like this:

if(index > bound)
{
	error
}

And that's done for every dimension. That's it, really. Seeing as it's so simple, I felt bad
and added another feature.

INCREMENT/DECREMENT

Ident++ and Ident-- are now valid assignments, which is super nice within for and while 
loops (and indeed, you can see increment being used in the Test.TAS file). Because the code
is nicely refactored, adding these assignments was a breeze. I decided to make them assignments
rather than operators, as realistically, their use is for for and while loops.

The assignments are implemented in the VariableAssignment production. If the Ident is
followed by ":=", it's a regular assignment. Otherwise, if it's "++" is increment, and if it's
"--" it's decrement.

Increment is implemented by pushing on a constant value of 1, the value of the Ident and an
add instruction. Decrement is the same, except instead of the add, it's a sub. I would suggest
looking at the VariableAssignment production, as all should be clear seeing as it's just
30 lines of code (with most of that being indentation).

I hope that run time array bounds + increment/decrememt + refactoring of the whole Tastier
file is enough as far as additional features go. There are a bunch of things one could do,
but alas there just isn't enough time.

P.S. If this documentation is lackluster, please let me know precisely what it is missing! I
tried to make it concise, but I don't think I quite have the hang of it, so all feedback
will be appreciated. My e-mail is buinovsa@tcd.ie .

